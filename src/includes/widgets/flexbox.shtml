<div class="widget widget-flexbox">
	<h3 class="title">css3 flexbox layout</h3>
	<div class="box">
		<h5 class="title">Flexbox (Flexible Box Layout Module) 伸缩盒模型</h5>
		<p>Flexbox(目前处于W3C工作草案)旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名"flex"。<a href="http://caniuse.com/#search=flexbox" target="_blank">caniuse.com</a></p>
		<p>这里有完整的实例：<a href="http://codepen.io/justd/pen/yydezN" target="_blank">点击这里</a></p>
		<div class="flex-graphics">
			<p class="margin-top-0">flex-container</p>
			<div class="row">
				<div class="col-t-3"><div class="box-row">flex-item</div></div>
				<div class="col-t-3"><div class="box-row">flex-item</div></div>
				<div class="col-t-3"><div class="box-row">flex-item</div></div>
				<div class="col-t-3"><div class="box-row">flex-item</div></div>
			</div>
		</div>
		<div class="code">
			<h6 class="title">Html</h6>
			<pre class="xml"><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"flex-container"</span>&gt;</span><br>  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"flex-item"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span><br>  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"flex-item"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span><br>  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"flex-item"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span><br>  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"flex-item"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span><br><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre>
		</div>
		<div class="code">
			<h6 class="title">Css</h6>
			<pre class="css"><code><span class="class">.flex-container</span><span class="rules"> &#123;<br><span class="rule">  <span class="property">display</span>:<span class="value"> flex</span> | <span class="value"> inline-flex</span>;<br></span><span class="rule">  <span class="property">flex-direction</span>:<span class="value"> row</span> | <span class="value"> row-reverse</span> | <span class="value"> column</span> | <span class="value"> column-reverse</span>;<br></span><span class="rule">  <span class="property">flex-wrap</span>:<span class="value"> nowrap</span> | <span class="value"> wrap</span> | <span class="value"> wrap-reverse</span>;<br></span><span class="rule">  <span class="property">flex-flow</span>:<span class="value"> &lt;flex-direction&gt;</span> || <span class="value"> &lt;flex-wrap&gt;</span>;<br></span><span class="rule">  <span class="property">justify-content</span>:<span class="value"> flex-start</span> | <span class="value"> flex-end</span> | <span class="value"> center</span> | <span class="value"> space-between</span> | <span class="value"> space-around</span>;<br></span><span class="rule">  <span class="property">align-items</span>:<span class="value"> flex-start</span> | <span class="value"> flex-end</span> | <span class="value"> center</span> | <span class="value"> baseline</span> | <span class="value"> stretch</span>;<br></span><span class="rule">  <span class="property">align-content</span>:<span class="value"> flex-start</span> | <span class="value"> flex-end</span> | <span class="value"> center</span> | <span class="value"> space-between</span> | <span class="value"> space-around</span> | <span class="value"> stretch</span>;<br></span>&#125;</span>  <br><br><span class="class">.flex-item</span><span class="rules"> &#123;<br><span class="rule">  <span class="property">order</span>:<span class="value"> &lt;integer&gt;</span>;<br></span><span class="rule">  <span class="property">flex-grow</span>:<span class="value"> &lt;number&gt;</span>;<br></span><span class="rule">  <span class="property">flex-shrink</span>:<span class="value"> &lt;number&gt;</span>;<br></span><span class="rule">  <span class="property">flex-basis</span>:<span class="value"> &lt;length&gt;</span> | <span class="value"> auto</span>;<br></span><span class="rule">  <span class="property">flex</span>:<span class="value"> none</span> | [ <span class="value">&lt;'flex-grow'&gt;</span><span class="value"> &lt;'flex-shrink'&gt;</span>? || <span class="value">&lt;'flex-basis'&gt;</span> ];<br></span><span class="rule">  <span class="property">align-self</span>:<span class="value"> auto</span> | <span class="value"> flex-start</span> | <span class="value"> flex-end</span> | <span class="value"> center</span> | <span class="value"> baseline</span> | <span class="value"> stretch</span>;<br></span>&#125;</span></code></pre>
		</div>
		<br>
		<br>
		<h5 class="title">Flex-Container 属性值</h5>
		<p>1.display:flex | inline-flex</p>
		<p>任何一个容器都可以指定为Flex布局。把容器声明为flex容器后，容器的所有子元素自动变为容器的item，<span class="text-warning">包括:before,:after;</span>可以简单的理解，把容器声明为flex容器，就像是创建一个二维坐标。</p>
		<p><span class="text-warning">注意:</span> Flex容器 &ne; 块容器, 因此有些设计用来控制块容器布局的属性在Flexbox布局中不适用
		。特别是：css grid中所有column-*属性、float、clear属性和vertical-align属性在Flex容器的子元素上是没有作用的。</p>
		<br>
		<p>2.flex-direction: row |  row-reverse |  column |  column-reverse;</p>
		<p>该属性控制Flex项目沿着主轴（Main Axis）的排列方向。可以简单的理解为，坐标X轴的方向。</p>
		<br>
		<p>3.flex-wrap: nowrap |  wrap |  wrap-reverse;</p>
		<p>该属性主要用来控制伸缩容器是单行还是多行，也决定了侧轴方向上新的一行的堆放方向。</p>
		<br>
		<p>4.flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</p>
		<p>该属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
		<br>
		<p>5.justify-content: flex-start |  flex-end |  center |  space-between |  space-around;</p>
		<p>该属性定义了项目在主轴上的对齐方式。</p>
		<br>
		<p>6.align-items: flex-start |  flex-end |  center |  baseline |  stretch;</p>
		<p>该属性定义项目在交叉轴上如何对齐。</p>
		<br>
		<p>7.align-content: flex-start |  flex-end |  center |  space-between |  space-around |  stretch;</p>
		<p>该属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。换句话说，只有当 flex-wrap:wrap; 改属性才会生效。</p>
		<br>
		<h5 class="title">Flex-Item 属性值</h5>
		<p>1.order: <integer>;</p>
		<p>该属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
		<br>
		<p>2.flex-grow: <number>;</p>
		<p>该属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
		<br>
		<p>3.flex-shrink: <number>;</p>
		<p>该属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
		<br>
		<p>4.flex-basis: <length> |  auto;</p>
		<p>该属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
		<br>
		<p>5.flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ];</p>
		<p>该属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
		<p><span class="text-warning">注意:</span> flex有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
		<br>
		<p>6.align-self: auto |  flex-start |  flex-end |  center |  baseline |  stretch;</p>
		<p>该属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
		<br>
		<br>
		<div class="flexbox-img">
			<img src="assets/images/flexbox.jpg" alt="img">
		</div>
		<p><span class="text-warning">注意:</span> Flexbox布局比较适合Web应用程序的一些小组件和小规模的布局，而Grid布局更适合用于一些大规模的布局。</p>
		<br>
		<h5 class="title">CSS Box Alignment模块</h5>
		<p>CSS Box Alignment主要是用来控制元素在容器中对齐方式的模块。众说周知，控制元素在容器中的对齐方式是件特别痛苦的事情，比如水平方向的两端对齐，垂直方向的垂直居中。</p>
		<ul>
			<li>justify-content</li>
			<li>align-content</li>
			<li>justify-self</li>
			<li>align-self</li>
			<li>justify-items</li>
			<li>align-items</li>
		</ul>
		<p>上面示例看到的是这些属性运用在Flex容器，其实除了应用在大家常见的Flex容器上之外，还可以运用在块容器（Block container）、多列容器（Multicol Container）和网格容器（Grid Container）。</p>
	</div>
</div>

<style type="text/css">
  .flexbox-img img{
  	width: 100%;
  }
	.flex-graphics{
		background-color: #0d8fdb;
		padding: 20px 30px;
		text-align: center;
		color: #fff;
		margin-bottom: 20px;
	}
	.flex-graphics .box-row{
		padding: 15px;
		margin: 10px 0;
		background-color: #d41212;
	}
</style>